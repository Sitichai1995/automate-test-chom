1. หากต้องการ Design Test-case มี Technique อะไรบ้างที่สามารถช่วยให้การ Design Test-case เพื่อทดสอบระบบได้ครอบคลุม
- มีดังนี้
1. black box testing คือการทดสอบซอฟต์แวร์โดยไม่ยุ่งกับโค้ด ซึ่งมีเทคนิคคือ
1.1 Equivalance Partioning การแบ่งข้อมูลออกเป็นชุดย่อยๆลงเพื่อให้ง่ายขึ้น
1.2 Boundary Value Analysis วิเคราะห์การทำงานซอฟต์แวร์โดยการใส่ข้อมูลที่ยังอยู่ในขอบเขตของการทดสอบ
1.3 Decision Tables คือการสร้างตารางที่จะประกอบไปด้วยเงื่อนไขเพื่อดูว่าผลที่ได้สอดคล้องหรือไม่
1.4 state Transition testing ทดสอบการเปลี่ยน input ที่รับเข้ามา เพื่อดูถึงค่า output ที่แสดงออกมา
1.5 usecase testing การสร้าง test case ที่อ้างอิงจากปัญหาจากผู้ใช้เพื่อการทดสอบ เพื่อตวจสอบความถูกต้อง

2. White box testing คือการทดสอบซอฟต์แวร์โดยอาศัยความรู้เรื่องโค้ด โครงสร้างของซอฟต์แวร์มาช่วยในการทดสอบ

3. Experience-based test techniques คือการนำประสบการณ์มาใช้ในการสร้าง test case มีเทคนิคคือ
3.1 Exploratory Testing การสุ่มสำรวจปัญหาหรือความผิดพลาดของซอฟต์แวร์
3.2 Error Guessing สังเกตซอฟต์แวร์และใช้ความรู้ที่มีสร้าง test case ที่จะค้นหาข้อผิดพลาดได้
3.3 Checklist-based testing ใช้ลิสต์ที่การสร้างไว้ก่อนตรวจสอบประสิทธิภาพของการทดสอบ

------------------------------------------------------------------------------------

2.Design Test-case จากโจทย์ต่อไปนี้อย่างน้อย 5 Case พร้อมระบุ Technique ที่ใช้ข้อนั้น ๆ

[โจทย์] : ผู้ใช้ต้องการโอน Point จากบัญชีตัวเอง ไปยังบัญชีปลายทาง โดยเงื่อนไขคือ
ขั้นต่ำในการโอน Point คือ 100 / การทำรายการ
สูงสุดในการโอน Point คือ 3,000 / การทำรายการ
หากโอน < ขั้นต่ำ ระบบคิดค่า Fee 8 Point โดยบวกเพิ่มจากค่าที่กรอก
ต้องกรอก Passcode 4 หลัก ให้ถูกต้องจึงทำรายการสำเร็จ
บัญชีปลายทางต้องถูกต้อง จึงจะสามารถกรอก Passcode ได้

case 1 ผู้ใช้กรอกข้อมูลที่ถูกต้องและโอนพ้อยท์ในปริมาณที่น้อยกว่าขั้นต่ำ
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 50 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์สำเร็จ เสียค่า Fee 8 point

case 2 ผู้ใช้กรอกข้อมูลที่ถูกต้องและโอนพ้อยท์ในปริมาณที่อยู่ในช่วงที่ยอมรับ
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 500 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์สำเร็จ

case 3 ผู้ใช้กรอกข้อมูลที่ไม่ถูกต้องเกี่ยวกับบัญชีปลายทาง
- ผู้ใช้กรอกบัญชีปลายทางไม่ถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 1000 พอยท์
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่าบัญชีปลายทางไม่ถูกต้อง

case 4 ผู้ใช้กรอกข้อมูลที่ถูกต้องแต่โอนพ้อยท์เกินขั้นสูงสุด
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 5000 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่าเกินขั้นสูงสุดที่จะโอนพอยท์ได้

case 5 ผู้ใช้กรอกข้อมูลที่ถูกต้องแต่กรอก passcode ไม่ถูกต้อง
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 500 พอยท์
- ผู้ใช้กรอก passcode ไม่ถูกต้อง
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่ากรอก passcode ไม่ถูกต้อง

------------------------------------------------------------------------------------

3.หากทีมต้องการทดสอบ Feature ในข้อ 2 จะต้องมี Test Plan อย่างไร?

1. Introduction
- เป็นการทดสอบระบบโอนพอยท์ไปยังบัญชีปลายทาง
- วัตถุประสงค์: เพื่อทดสอบว่าระบบโอนพอยท์ไปยังบัญชีปลายทางทำงานได้อย่างถูกต้องและปลอดภัย

2. Scope
- ระบบครอบคลุมการทำงานระบบโอนพอยท์ไปยังบัญชีปลายทาง
- ไม่ได้ครอบคลุมระบบ login และระบบอื่นๆ

3.Test case
มีรายละเอียดดังนี้ 

case 1 ผู้ใช้กรอกข้อมูลที่ถูกต้องและโอนพ้อยท์ในปริมาณที่น้อยกว่าขั้นต่ำ
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 50 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์สำเร็จ เสียค่า Fee 8 point

case 2 ผู้ใช้กรอกข้อมูลที่ถูกต้องและโอนพ้อยท์ในปริมาณที่อยู่ในช่วงที่ยอมรับ
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 500 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์สำเร็จ

case 3 ผู้ใช้กรอกข้อมูลที่ไม่ถูกต้องเกี่ยวกับบัญชีปลายทาง
- ผู้ใช้กรอกบัญชีปลายทางไม่ถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 1000 พอยท์
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่าบัญชีปลายทางไม่ถูกต้อง

case 4 ผู้ใช้กรอกข้อมูลที่ถูกต้องแต่โอนพ้อยท์เกินขั้นสูงสุด
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 5000 พอยท์
- ผู้ใช้กรอก passcode ถูกต้อง
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่าเกินขั้นสูงสุดที่จะโอนพอยท์ได้

case 5 ผู้ใช้กรอกข้อมูลที่ถูกต้องแต่กรอก passcode ไม่ถูกต้อง
- ผู้ใช้กรอกบัญชีปลายทางถูกต้อง
- ผู้ใช้กรอกพ้อยท์ที่จะโอน 500 พอยท์
- ผู้ใช้กรอก passcode ไม่ถูกต้อง
expected: โอนพ้อยท์ไม่สำเร็จ แจ้งเตือนว่ากรอก passcode ไม่ถูกต้อง

4. Enviroment
- Windows
- macOS
- Linux

5. Incidentals 
- เตรียมข้อมูลสำหรับการทดสอบ

6. Risks 
- ความเสี่ยงที่อาจะเกิดขึ้นและวิธีจัดการกับความเสี่ยง

7. Tasks
- แผนงานที่เกี่ยวข้องกับการทดสอบ

------------------------------------------------------------------------------------

4.Software Testing มีความสำคัญอย่างไรในการพัฒนาระบบ
- ตรวจสอบความผิดพลาดของระบบ
- ประหยัดค่าใช้จ่ายและเวลาโดยการค้นพบข้อผิดพลาดของระบบก่อนจะเป็นปัญหาใหญ่ในอนาคต
- ระบบมีความปลอดภัยมากขึ้นเพราะลดความเสี่ยงความผิดพลาดของระบบลง
- ซอฟต์แวร์ที่ผ่านการตรวจสอบจาก software testing จะทำให้ระบบมีความสามารถที่ตรงตามมาตรฐานและความต้องการมากขึ้น